{
    "sourceFile": "src/services/config_manager/config_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1744733152424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744742261737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import os\n import json\n from const import auth_const, config_const\n-from message_hub import MessageHub\n+from services.message_HUB.message_hub import MessageHub\n from utils.config_utils import parse_params, \\\n                 parse_params,get_param_value, \\\n                 validate_params, add_default_value\n \n@@ -14,11 +14,12 @@\n         if cls._instance is None:\n             cls._instance = super(ConfigManager, cls).__new__(cls)\n             cls._instance._initialize(links_file_path, kafka_config, kafka_topic)\n         else:\n-            if cls._instance._validate_links_file_path(links_file_path):\n-                cls._instance._links_file_path = links_file_path\n-                cls._instance._read_links_file_and_send()\n+            if links_file_path:\n+                if cls._instance._validate_links_file_path(links_file_path):\n+                    cls._instance._links_file_path = links_file_path\n+                    cls._instance._read_links_file_and_send()\n         return cls._instance\n \n     def _initialize(self, links_file_path, kafka_config, kafka_topic):\n         self._kafka_config = kafka_config\n"
                },
                {
                    "date": 1744747179770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,19 @@\n                     cls._instance._links_file_path = links_file_path\n                     cls._instance._read_links_file_and_send()\n         return cls._instance\n \n+    def set_links_file_path(self, links_file_path):\n+        \"\"\"\n+        Set the path to the links file and read it.\n+        \"\"\"\n+        if self._validate_links_file_path(links_file_path):\n+            self._links_file_path = links_file_path\n+        else:\n+            print(f\"Invalid links file path: {links_file_path}\")\n+        return self\n+    \n+\n     def _initialize(self, links_file_path, kafka_config, kafka_topic):\n         self._kafka_config = kafka_config\n         self._links_file_path = links_file_path\n         self._kafka_topic = kafka_topic\n"
                },
                {
                    "date": 1744747214996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n-    def _read_links_file_and_send(self):\n+    def read_links_file_and_send(self):\n         self.tasks = self._read_links_file(self._links_file_path)\n         for task in self.tasks:\n             self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n \n"
                },
                {
                    "date": 1744747234807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n         else:\n             if links_file_path:\n                 if cls._instance._validate_links_file_path(links_file_path):\n                     cls._instance._links_file_path = links_file_path\n-                    cls._instance._read_links_file_and_send()\n+                    cls._instance.read_links_file_and_send()\n         return cls._instance\n \n     def set_links_file_path(self, links_file_path):\n         \"\"\"\n@@ -37,9 +37,9 @@\n         self._links_file_path = links_file_path\n         self._kafka_topic = kafka_topic\n         self.message_hub = MessageHub(kafka_config)\n         self.tasks = []\n-        self._read_links_file_and_send()\n+        self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n         if not os.path.exists(path):\n             print(f\"Invalid links file path: {path}\")\n"
                },
                {
                    "date": 1744747507388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n class ConfigManager:\n     _instance = None\n \n-    def __new__(cls, links_file_path, kafka_config, kafka_topic):\n+    def __new__(cls, kafka_config, kafka_topic, links_file_path=None):\n         if cls._instance is None:\n             cls._instance = super(ConfigManager, cls).__new__(cls)\n             cls._instance._initialize(links_file_path, kafka_config, kafka_topic)\n         else:\n"
                },
                {
                    "date": 1744749614002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import os\n import json\n-from const import auth_const, config_const\n+from src.const import auth_const, config_const\n from services.message_HUB.message_hub import MessageHub\n from utils.config_utils import parse_params, \\\n                 parse_params,get_param_value, \\\n                 validate_params, add_default_value\n"
                },
                {
                    "date": 1744749642943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import os\n import json\n-from src.const import auth_const, config_const\n-from services.message_HUB.message_hub import MessageHub\n+from src.const import auth_const\n+from src.services.message_HUB.message_hub import MessageHub\n from utils.config_utils import parse_params, \\\n                 parse_params,get_param_value, \\\n                 validate_params, add_default_value\n \n"
                },
                {
                    "date": 1744749657464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import os\n import json\n from src.const import auth_const\n from src.services.message_HUB.message_hub import MessageHub\n-from utils.config_utils import parse_params, \\\n+from src.utils.config_utils import parse_params, \\\n                 parse_params,get_param_value, \\\n                 validate_params, add_default_value\n \n \n"
                },
                {
                    "date": 1744750504964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,13 +33,14 @@\n     \n \n     def _initialize(self, links_file_path, kafka_config, kafka_topic):\n         self._kafka_config = kafka_config\n-        self._links_file_path = links_file_path\n         self._kafka_topic = kafka_topic\n         self.message_hub = MessageHub(kafka_config)\n         self.tasks = []\n-        self.read_links_file_and_send()\n+        self._validate_links_file_path(links_file_path):\n+            self._links_file_path = links_file_path\n+            self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n         if not os.path.exists(path):\n             print(f\"Invalid links file path: {path}\")\n"
                },
                {
                    "date": 1744750512131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         self._kafka_config = kafka_config\n         self._kafka_topic = kafka_topic\n         self.message_hub = MessageHub(kafka_config)\n         self.tasks = []\n-        self._validate_links_file_path(links_file_path):\n+        if self._validate_links_file_path(links_file_path):\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n"
                },
                {
                    "date": 1744750552073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if not os.path.exists(path):\n+        if path and (not os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744750629251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if path and (not os.path.exists(path)):\n+        if (not path) or (not os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744750647218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if (not path) or (not os.path.exists(path)):\n+        if (path  and  os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744750799920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if (path  and  os.path.exists(path)):\n+        if (path != None)  and  (os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744751007610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         self._kafka_config = kafka_config\n         self._kafka_topic = kafka_topic\n         self.message_hub = MessageHub(kafka_config)\n         self.tasks = []\n-        if self._validate_links_file_path(links_file_path):\n+        if self._validate_links_file_path(links_file_path or \"\"):\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n"
                },
                {
                    "date": 1744751093490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if (path != None)  and  (os.path.exists(path)):\n+        if  (os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744751099528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             self._links_file_path = links_file_path\n             self.read_links_file_and_send()\n \n     def _validate_links_file_path(self, path):\n-        if  (os.path.exists(path)):\n+        if  not (os.path.exists(path)):\n             print(f\"Invalid links file path: {path}\")\n             return False\n         return True\n \n"
                },
                {
                    "date": 1744756047090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,42 +47,43 @@\n             return False\n         return True\n \n     def read_links_file_and_send(self):\n-        self.tasks = self._read_links_file(self._links_file_path)\n-        for task in self.tasks:\n-            self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n+        folder_links, folder_limits = self.parse_links_file()\n+        for folder, tasks in folder_links.items():\n+                    for task in tasks:\n+                        task['max_concurrent'] = folder_limits.get(folder, config_const.MAX_CONCURRENT_DOWNLOADS_PER_FOLDER)\n+                        self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n+    # def _read_links_file(self, path):\n+    #     tasks = []\n+    #     folder_name = None\n+    #     with open(path, \"r\") as links_file:\n+    #         for line in links_file:\n+    #             line = line.strip()\n+    #             if not line:\n+    #                 continue\n+    #             if line.startswith(\"folder:\"):\n+    #                 folder_name = line.split(\"folder:\")[1].strip()\n+    #                 continue\n+    #             if not folder_name:\n+    #                 print(\"Skipping links because no folder name is specified.\")\n+    #                 continue\n+    #             link, params = line.strip().split(\" \", 1)\n+    #             param_tuples = parse_params(params)\n+    #             add_default_value(param_tuples, \"need_authentication\", \"False\")\n+    #             if eval(get_param_value(param_tuples, \"need_authentication\", \"False\")):\n+    #                 add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n+    #                 add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n+    #             if not validate_params(param_tuples, [\"file_name\", \"need_authentication\"], f\"Skipping invalid line: {line}\"):\n+    #                 continue\n+    #             params_dict = dict(param_tuples)\n+    #             tasks.append({\n+    #                 \"link\": link,\n+    #                 \"folder_name\": folder_name,\n+    #                 \"name\": get_param_value(param_tuples, \"file_name\"),\n+    #                 **params_dict\n+    #             })\n+    #     return tasks\n \n-    def _read_links_file(self, path):\n-        tasks = []\n-        folder_name = None\n-        with open(path, \"r\") as links_file:\n-            for line in links_file:\n-                line = line.strip()\n-                if not line:\n-                    continue\n-                if line.startswith(\"folder:\"):\n-                    folder_name = line.split(\"folder:\")[1].strip()\n-                    continue\n-                if not folder_name:\n-                    print(\"Skipping links because no folder name is specified.\")\n-                    continue\n-                link, params = line.strip().split(\" \", 1)\n-                param_tuples = parse_params(params)\n-                add_default_value(param_tuples, \"need_authentication\", \"False\")\n-                if eval(get_param_value(param_tuples, \"need_authentication\", \"False\")):\n-                    add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n-                    add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n-                if not validate_params(param_tuples, [\"file_name\", \"need_authentication\"], f\"Skipping invalid line: {line}\"):\n-                    continue\n-                params_dict = dict(param_tuples)\n-                tasks.append({\n-                    \"link\": link,\n-                    \"folder_name\": folder_name,\n-                    \"name\": get_param_value(param_tuples, \"file_name\"),\n-                    **params_dict\n-                })\n-        return tasks\n-\n     def __del__(self):\n         if hasattr(self, \"message_hub\"):\n             del self.message_hub\n"
                },
                {
                    "date": 1744756062129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,8 +82,58 @@\n     #                 \"name\": get_param_value(param_tuples, \"file_name\"),\n     #                 **params_dict\n     #             })\n     #     return tasks\n+    def parse_links_file(self):\n+        folder_links = defaultdict(list)\n+        folder_limits = {}\n+        current_folder = None\n+        \n+        with open(self._links_file_path, \"r\") as links_file:\n+            for line in links_file:\n+                line = line.strip()\n+                if not line:\n+                    continue\n \n+                if line.startswith(\"folder:\"):\n+                    current_folder = line.split(\"folder:\")[1].strip()\n+                    continue\n+                    \n+                if line.startswith(\"max_concurrent:\"):\n+                    if current_folder:\n+                        limit = int(line.split(\"max_concurrent:\")[1].strip())\n+                        folder_limits[current_folder] = min(\n+                            limit,\n+                            config_const.MAX_CONCURRENT_DOWNLOADS\n+                        )\n+                    continue\n+\n+                if not current_folder:\n+                    print(\"Skipping links because no folder name is specified.\")\n+                    continue\n+\n+                # Process link and parameters\n+                link, params = line.strip().split(\" \", 1)\n+                param_tuples = parse_params(params)\n+                add_default_value(param_tuples, \"need_authentication\", \"False\")\n+                \n+                if eval(get_param_value(param_tuples, \"need_authentication\", \"False\")):\n+                    add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n+                    add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n+                \n+                if not validate_params(param_tuples, [\"file_name\", \"need_authentication\"], f\"Skipping invalid line: {line}\"):\n+                    continue\n+                \n+                params_dict = dict(param_tuples)\n+                task = {\n+                    \"link\": link,\n+                    \"folder_name\": current_folder,\n+                    \"name\": get_param_value(param_tuples, \"file_name\"),\n+                    **params_dict\n+                }\n+                folder_links[current_folder].append(task)\n+                \n+        return folder_links, folder_limits    \n+\n     def __del__(self):\n         if hasattr(self, \"message_hub\"):\n             del self.message_hub\n"
                },
                {
                    "date": 1744756082054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,9 @@\n         for folder, tasks in folder_links.items():\n                     for task in tasks:\n                         task['max_concurrent'] = folder_limits.get(folder, config_const.MAX_CONCURRENT_DOWNLOADS_PER_FOLDER)\n                         self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n+    \n     # def _read_links_file(self, path):\n     #     tasks = []\n     #     folder_name = None\n     #     with open(path, \"r\") as links_file:\n"
                },
                {
                    "date": 1744756308810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,10 @@\n         for folder, tasks in folder_links.items():\n                     for task in tasks:\n                         task['max_concurrent'] = folder_limits.get(folder, config_const.MAX_CONCURRENT_DOWNLOADS_PER_FOLDER)\n                         self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n-    \n+\n+\n     # def _read_links_file(self, path):\n     #     tasks = []\n     #     folder_name = None\n     #     with open(path, \"r\") as links_file:\n@@ -83,8 +84,9 @@\n     #                 \"name\": get_param_value(param_tuples, \"file_name\"),\n     #                 **params_dict\n     #             })\n     #     return tasks\n+\n     def parse_links_file(self):\n         folder_links = defaultdict(list)\n         folder_limits = {}\n         current_folder = None\n@@ -132,9 +134,10 @@\n                     **params_dict\n                 }\n                 folder_links[current_folder].append(task)\n                 \n-        return folder_links, folder_limits    \n+        return folder_links, folder_limits\n \n+\n     def __del__(self):\n         if hasattr(self, \"message_hub\"):\n             del self.message_hub\n"
                },
                {
                    "date": 1744756396800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,13 @@\n import os\n import json\n-from src.const import auth_const\n+from src.const import auth_const, config_const\n from src.services.message_HUB.message_hub import MessageHub\n from src.utils.config_utils import parse_params, \\\n                 parse_params,get_param_value, \\\n                 validate_params, add_default_value\n+from collections import defaultdict\n \n-\n class ConfigManager:\n     _instance = None\n \n     def __new__(cls, kafka_config, kafka_topic, links_file_path=None):\n"
                },
                {
                    "date": 1744761069087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,40 +53,10 @@\n                     for task in tasks:\n                         task['max_concurrent'] = folder_limits.get(folder, config_const.MAX_CONCURRENT_DOWNLOADS_PER_FOLDER)\n                         self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n \n+ \n \n-    # def _read_links_file(self, path):\n-    #     tasks = []\n-    #     folder_name = None\n-    #     with open(path, \"r\") as links_file:\n-    #         for line in links_file:\n-    #             line = line.strip()\n-    #             if not line:\n-    #                 continue\n-    #             if line.startswith(\"folder:\"):\n-    #                 folder_name = line.split(\"folder:\")[1].strip()\n-    #                 continue\n-    #             if not folder_name:\n-    #                 print(\"Skipping links because no folder name is specified.\")\n-    #                 continue\n-    #             link, params = line.strip().split(\" \", 1)\n-    #             param_tuples = parse_params(params)\n-    #             add_default_value(param_tuples, \"need_authentication\", \"False\")\n-    #             if eval(get_param_value(param_tuples, \"need_authentication\", \"False\")):\n-    #                 add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n-    #                 add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n-    #             if not validate_params(param_tuples, [\"file_name\", \"need_authentication\"], f\"Skipping invalid line: {line}\"):\n-    #                 continue\n-    #             params_dict = dict(param_tuples)\n-    #             tasks.append({\n-    #                 \"link\": link,\n-    #                 \"folder_name\": folder_name,\n-    #                 \"name\": get_param_value(param_tuples, \"file_name\"),\n-    #                 **params_dict\n-    #             })\n-    #     return tasks\n-\n     def parse_links_file(self):\n         folder_links = defaultdict(list)\n         folder_limits = {}\n         current_folder = None\n"
                },
                {
                    "date": 1744767245341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import os\n+import  os\n import json\n from src.const import auth_const, config_const\n from src.services.message_HUB.message_hub import MessageHub\n from src.utils.config_utils import parse_params, \\\n"
                }
            ],
            "date": 1744733152424,
            "name": "Commit-0",
            "content": "import os\nimport json\nfrom const import auth_const, config_const\nfrom message_hub import MessageHub\nfrom utils.config_utils import parse_params, \\\n                parse_params,get_param_value, \\\n                validate_params, add_default_value\n\n\nclass ConfigManager:\n    _instance = None\n\n    def __new__(cls, links_file_path, kafka_config, kafka_topic):\n        if cls._instance is None:\n            cls._instance = super(ConfigManager, cls).__new__(cls)\n            cls._instance._initialize(links_file_path, kafka_config, kafka_topic)\n        else:\n            if cls._instance._validate_links_file_path(links_file_path):\n                cls._instance._links_file_path = links_file_path\n                cls._instance._read_links_file_and_send()\n        return cls._instance\n\n    def _initialize(self, links_file_path, kafka_config, kafka_topic):\n        self._kafka_config = kafka_config\n        self._links_file_path = links_file_path\n        self._kafka_topic = kafka_topic\n        self.message_hub = MessageHub(kafka_config)\n        self.tasks = []\n        self._read_links_file_and_send()\n\n    def _validate_links_file_path(self, path):\n        if not os.path.exists(path):\n            print(f\"Invalid links file path: {path}\")\n            return False\n        return True\n\n    def _read_links_file_and_send(self):\n        self.tasks = self._read_links_file(self._links_file_path)\n        for task in self.tasks:\n            self.message_hub.send_message(self._kafka_topic, key=task[\"link\"], value=task)\n\n    def _read_links_file(self, path):\n        tasks = []\n        folder_name = None\n        with open(path, \"r\") as links_file:\n            for line in links_file:\n                line = line.strip()\n                if not line:\n                    continue\n                if line.startswith(\"folder:\"):\n                    folder_name = line.split(\"folder:\")[1].strip()\n                    continue\n                if not folder_name:\n                    print(\"Skipping links because no folder name is specified.\")\n                    continue\n                link, params = line.strip().split(\" \", 1)\n                param_tuples = parse_params(params)\n                add_default_value(param_tuples, \"need_authentication\", \"False\")\n                if eval(get_param_value(param_tuples, \"need_authentication\", \"False\")):\n                    add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n                    add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n                if not validate_params(param_tuples, [\"file_name\", \"need_authentication\"], f\"Skipping invalid line: {line}\"):\n                    continue\n                params_dict = dict(param_tuples)\n                tasks.append({\n                    \"link\": link,\n                    \"folder_name\": folder_name,\n                    \"name\": get_param_value(param_tuples, \"file_name\"),\n                    **params_dict\n                })\n        return tasks\n\n    def __del__(self):\n        if hasattr(self, \"message_hub\"):\n            del self.message_hub\n"
        }
    ]
}