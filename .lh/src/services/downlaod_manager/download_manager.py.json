{
    "sourceFile": "src/services/downlaod_manager/download_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1744751360376,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744751454804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from cookies_authentication import (\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n-from message_hub import MessageHub\n+from src.services.message_HUB.message_hub import MessageHub\n import asyncio\n import os\n \n \n"
                },
                {
                    "date": 1744751930510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,4 +75,23 @@\n         error_message = f\"Error processing task: {str(e)}\"\n         print(error_message)\n         message_hub.send_message(status_topic, key=name, value={\"status\": error_message})\n \n+\n+\n+\n+if __name__ == \"__main__\":\n+    # Kafka configuration\n+    kafka_config =config_const.KAFKA_CONFIG\n+    kafka_topic = config_const.KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+    status_topic = config_const.KAFKA_TOPIC_DOWNLOAD_STATUS\n+\n+    # Initialize the Message Hub\n+    message_hub = MessageHub(kafka_config)\n+\n+    # Consume tasks from Kafka\n+    def handle_task(task):\n+        asyncio.run(MessageHub.process_task(task, message_hub, status_topic))\n+\n+    message_hub.consume_messages(\n+        kafka_topic, group_id=\"download-manager-group\", callback=handle_task\n+    )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1744751967954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n from cookies_authentication import (\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n+\n+from src.const.config_const import KAFKA_CONFIG, KAFKA_TOPIC_DOWNLOAD_STATUS,   KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+\n from src.services.message_HUB.message_hub import MessageHub\n import asyncio\n import os\n \n"
                },
                {
                    "date": 1744751979416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,10 @@\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n \n-from src.const.config_const import KAFKA_CONFIG, KAFKA_TOPIC_DOWNLOAD_STATUS,   KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+from src.const.config_const import KAFKA_CONFIG, KAFKA_TOPIC_DOWNLOAD_STATUS,\\\n+    KAFKA_TOPIC_DOWNLOAD_REQUESTS\n \n from src.services.message_HUB.message_hub import MessageHub\n import asyncio\n import os\n"
                },
                {
                    "date": 1744751990612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,10 @@\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n \n-from src.const.config_const import KAFKA_CONFIG, KAFKA_TOPIC_DOWNLOAD_STATUS,\\\n-    KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+from src.const.config_const import KAFKA_CONFIG,\\\n+     KAFKA_TOPIC_DOWNLOAD_STATUS , KAFKA_TOPIC_DOWNLOAD_REQUESTS\n \n from src.services.message_HUB.message_hub import MessageHub\n import asyncio\n import os\n"
                },
                {
                    "date": 1744751998294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,11 +84,11 @@\n \n \n if __name__ == \"__main__\":\n     # Kafka configuration\n-    kafka_config =config_const.KAFKA_CONFIG\n-    kafka_topic = config_const.KAFKA_TOPIC_DOWNLOAD_REQUESTS\n-    status_topic = config_const.KAFKA_TOPIC_DOWNLOAD_STATUS\n+    kafka_config =KAFKA_CONFIG\n+    kafka_topic = KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+    status_topic = KAFKA_TOPIC_DOWNLOAD_STATUS\n \n     # Initialize the Message Hub\n     message_hub = MessageHub(kafka_config)\n \n"
                },
                {
                    "date": 1744753183700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,101 +1,79 @@\n+import os\n+import asyncio\n from cookies_authentication import (\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n-\n-from src.const.config_const import KAFKA_CONFIG,\\\n-     KAFKA_TOPIC_DOWNLOAD_STATUS , KAFKA_TOPIC_DOWNLOAD_REQUESTS\n-\n+from src.const.config_const import (\n+    KAFKA_CONFIG,\n+    KAFKA_TOPIC_DOWNLOAD_STATUS,\n+    KAFKA_TOPIC_DOWNLOAD_REQUESTS,\n+)\n from src.services.message_HUB.message_hub import MessageHub\n-import asyncio\n-import os\n \n \n-async def download_video(cookies_path, link, name, folder_path):\n-    \"\"\"\n-    Asynchronously download a video using yt-dlp.\n-    \"\"\"\n-    os.makedirs(folder_path, exist_ok=True)\n-    output_path = os.path.join(folder_path, f\"{name}.%(ext)s\")\n-    if cookies_path is None:\n-        command = [\n-            \"yt-dlp\",\n-            link,\n-            \"-o\",\n-            os.path.abspath(output_path),\n-        ]\n-    else:\n-        command = [\n-            \"yt-dlp\",\n-            \"--cookies\",\n-            os.path.abspath(cookies_path),\n-            link,\n-            \"-o\",\n-            os.path.abspath(output_path),\n-        ]\n+class DownloadManager:\n+    def __init__(self, kafka_config=None, request_topic=None, status_topic=None):\n+        self._kafka_config = kafka_config or KAFKA_CONFIG\n+        self._request_topic = request_topic or KAFKA_TOPIC_DOWNLOAD_REQUESTS\n+        self._status_topic = status_topic or KAFKA_TOPIC_DOWNLOAD_STATUS\n+        self.message_hub = MessageHub(self._kafka_config)\n \n-    process = await asyncio.create_subprocess_exec(\n-        *command,\n-        stdout=asyncio.subprocess.PIPE,        stderr=asyncio.subprocess.PIPE,\n-    )\n-    stdout, stderr = await process.communicate()\n+    async def _download_video(self, cookies_path, link, name, folder_path):\n+        os.makedirs(folder_path, exist_ok=True)\n+        output_path = os.path.join(folder_path, f\"{name}.%(ext)s\")\n+        command = [\"yt-dlp\"]\n+        if cookies_path:\n+            command += [\"--cookies\", os.path.abspath(cookies_path)]\n+        command += [link, \"-o\", os.path.abspath(output_path)]\n \n-    if process.returncode == 0:\n-        return f\"SUCCESS: {link} downloaded to {folder_path} as {name}\"\n-    else:\n-        return f\"FAILED: {link} - {stderr.decode().strip()}\"\n+        process = await asyncio.create_subprocess_exec(\n+            *command,\n+            stdout=asyncio.subprocess.PIPE,\n+            stderr=asyncio.subprocess.PIPE,\n+        )\n+        stdout, stderr = await process.communicate()\n \n+        if process.returncode == 0:\n+            return f\"SUCCESS: {link} downloaded to {folder_path} as {name}\"\n+        else:\n+            return f\"FAILED: {link} - {stderr.decode().strip()}\"\n \n-async def process_task(task,  message_hub, status_topic):\n-    \"\"\"\n-    Processes a single download task.\n-    \"\"\"\n-    try:\n-        link = task[\"link\"]\n-        name = task[\"name\"]\n-        try: \n-            need_cookies = task[\"need_authentication\"] \n-        except KeyError:\n-            need_cookies = False\n+    async def _process_task(self, task):\n+        try:\n+            link = task[\"link\"]\n+            name = task[\"name\"]\n+            need_cookies = task.get(\"need_authentication\", False)\n             cookies_path = None\n-            \n-        \n-        cookies_path = None\n-        folder_name = task[\"folder_name\"]\n-        folder_path = os.path.join(\"./resources\", folder_name)\n-        if eval(need_cookies):\n\\ No newline at end of file\n-            raw_cookie_path = task[\"raw_cookies_path\"]\n-            cookies_path =  task[\"cookies_path\"]\n-            cookies = create_cookies_from_browser_cookies(raw_cookie_path)\n-            save_cookies_to_file(cookies_path, cookies)   \n-            \n \n-        # Execute the download\n-        status = await download_video(cookies_path, link, name, folder_path)\n+            folder_name = task[\"folder_name\"]\n+            folder_path = os.path.join(\"./resources\", folder_name)\n \n-        # Publish the status to the status topic\n-        message_hub.send_message(status_topic, key=name, value={\"status\": status})\n-    except Exception as e:\n-        error_message = f\"Error processing task: {str(e)}\"\n-        print(error_message)\n-        message_hub.send_message(status_topic, key=name, value={\"status\": error_message})\n+            if eval(str(need_cookies)):\n+                raw_cookie_path = task[\"raw_cookies_path\"]\n+                cookies_path = task[\"cookies_path\"]\n+                cookies = create_cookies_from_browser_cookies(raw_cookie_path)\n+                save_cookies_to_file(cookies_path, cookies)\n \n+            status = await self._download_video(cookies_path, link, name, folder_path)\n+            self.message_hub.send_message(self._status_topic, key=name, value={\"status\": status})\n \n+        except Exception as e:\n+            error_message = f\"Error processing task: {str(e)}\"\n+            print(error_message)\n+            self.message_hub.send_message(self._status_topic, key=task.get(\"name\", \"unknown\"), value={\"status\": error_message})\n \n+    def run(self):\n+        def handle_task(task):\n+            asyncio.run(self._process_task(task))\n \n-if __name__ == \"__main__\":\n-    # Kafka configuration\n-    kafka_config =KAFKA_CONFIG\n-    kafka_topic = KAFKA_TOPIC_DOWNLOAD_REQUESTS\n-    status_topic = KAFKA_TOPIC_DOWNLOAD_STATUS\n+        self.message_hub.consume_messages(\n+            self._request_topic,\n+            group_id=\"download-manager-group\",\n+            callback=handle_task,\n+        )\n \n-    # Initialize the Message Hub\n-    message_hub = MessageHub(kafka_config)\n \n-    # Consume tasks from Kafka\n-    def handle_task(task):\n-        asyncio.run(MessageHub.process_task(task, message_hub, status_topic))\n-\n-    message_hub.consume_messages(\n-        kafka_topic, group_id=\"download-manager-group\", callback=handle_task\n-    )\n+if __name__ == \"__main__\":\n+    manager = DownloadManager()\n+    manager.run()\n"
                },
                {
                    "date": 1744753282835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import os\n import asyncio\n-from cookies_authentication import (\n+from src.services.downlaod_manager.cookies_authentication import (\n     create_cookies_from_browser_cookies,\n     save_cookies_to_file,\n )\n from src.const.config_const import (\n"
                },
                {
                    "date": 1744753882085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n             folder_name = task[\"folder_name\"]\n             folder_path = os.path.join(\"./resources\", folder_name)\n \n-            if eval(str(need_cookies)):\n+            if str(need_cookies).lower() == 'true':\n                 raw_cookie_path = task[\"raw_cookies_path\"]\n                 cookies_path = task[\"cookies_path\"]\n                 cookies = create_cookies_from_browser_cookies(raw_cookie_path)\n                 save_cookies_to_file(cookies_path, cookies)\n"
                }
            ],
            "date": 1744751360376,
            "name": "Commit-0",
            "content": "from cookies_authentication import (\n    create_cookies_from_browser_cookies,\n    save_cookies_to_file,\n)\nfrom message_hub import MessageHub\nimport asyncio\nimport os\n\n\nasync def download_video(cookies_path, link, name, folder_path):\n    \"\"\"\n    Asynchronously download a video using yt-dlp.\n    \"\"\"\n    os.makedirs(folder_path, exist_ok=True)\n    output_path = os.path.join(folder_path, f\"{name}.%(ext)s\")\n    if cookies_path is None:\n        command = [\n            \"yt-dlp\",\n            link,\n            \"-o\",\n            os.path.abspath(output_path),\n        ]\n    else:\n        command = [\n            \"yt-dlp\",\n            \"--cookies\",\n            os.path.abspath(cookies_path),\n            link,\n            \"-o\",\n            os.path.abspath(output_path),\n        ]\n\n    process = await asyncio.create_subprocess_exec(\n        *command,\n        stdout=asyncio.subprocess.PIPE,        stderr=asyncio.subprocess.PIPE,\n    )\n    stdout, stderr = await process.communicate()\n\n    if process.returncode == 0:\n        return f\"SUCCESS: {link} downloaded to {folder_path} as {name}\"\n    else:\n        return f\"FAILED: {link} - {stderr.decode().strip()}\"\n\n\nasync def process_task(task,  message_hub, status_topic):\n    \"\"\"\n    Processes a single download task.\n    \"\"\"\n    try:\n        link = task[\"link\"]\n        name = task[\"name\"]\n        try: \n            need_cookies = task[\"need_authentication\"] \n        except KeyError:\n            need_cookies = False\n            cookies_path = None\n            \n        \n        cookies_path = None\n        folder_name = task[\"folder_name\"]\n        folder_path = os.path.join(\"./resources\", folder_name)\n        if eval(need_cookies):\n            raw_cookie_path = task[\"raw_cookies_path\"]\n            cookies_path =  task[\"cookies_path\"]\n            cookies = create_cookies_from_browser_cookies(raw_cookie_path)\n            save_cookies_to_file(cookies_path, cookies)   \n            \n\n        # Execute the download\n        status = await download_video(cookies_path, link, name, folder_path)\n\n        # Publish the status to the status topic\n        message_hub.send_message(status_topic, key=name, value={\"status\": status})\n    except Exception as e:\n        error_message = f\"Error processing task: {str(e)}\"\n        print(error_message)\n        message_hub.send_message(status_topic, key=name, value={\"status\": error_message})\n\n"
        }
    ]
}