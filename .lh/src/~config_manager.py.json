{
    "sourceFile": "src/~config_manager.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744732858563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744732858563,
            "name": "Commit-0",
            "content": "from message_hub import MessageHub\nimport os\nimport json\nimport const.auth_const   as auth_const\nimport const.config_const   as config_const\n\n\ndef parse_params (params):\n    param_tuples = []\n    for param in params.split(\" \"):\n        if \"=\" in param:\n            key, value = param.split(\"=\")\n            # Strip any quotes and whitespace\n            key = key.strip()\n            value = value.strip('\"').strip()\n            param_tuples.append((key, value)) \n    return param_tuples\n\ndef get_param_value(param_tuples, key, default=None):\n    \"\"\"\n    Gets a value from param_tuples by key\n    Args:\n        param_tuples: List of tuples containing (key, value) pairs\n        key: Key to look up\n        default: Default value if key not found\n    Returns:\n        Value for the key or default if not found\n    \"\"\"\n    params_dict = dict(param_tuples)\n    return params_dict.get(key, default)\n\ndef validate_params (param_tuples,mandatory_parameters, error_message):\n    \"\"\"\n    Validates the parameters in the param_tuples list.\n    \"\"\"\n    param_keys = [key for key, _ in param_tuples]\n    for mandatory_param in mandatory_parameters:\n        if mandatory_param not in param_keys:\n            print(f\"{error_message} - Missing mandatory parameter: {mandatory_param}\")\n            return False\n    return True\n\ndef add_default_value(param_tuples, key, default_value):\n    \"\"\"\n    Adds a default value for a key if it doesn't exist in the param_tuples\n    Args:\n        param_tuples: List of tuples containing (key, value) pairs\n        key: Key to check for\n        default_value: Default value to add if key is missing\n    Returns:\n        Updated param_tuples list\n    \"\"\"\n    if not any(k == key for k, _ in param_tuples):\n        param_tuples.append((key, default_value))\n\n     \ndef read_links_file(links_file_path):\n    \"\"\"\n    Reads the links file and returns a list of download tasks.\n    Each task is a dictionary containing the link, name, and folder name.\n    \"\"\"\n    if not os.path.exists(links_file_path):\n        raise FileNotFoundError(f\"Links file not found: {links_file_path}\")\n\n    tasks = []\n    folder_name = None\n\n    with open(links_file_path, \"r\") as links_file:\n        for line in links_file:\n            line = line.strip()\n            if not line:\n                continue\n\n            # Check if the line specifies the folder name\n            if line.startswith(\"folder:\"):\n                folder_name = line.split(\"folder:\")[1].strip()\n                continue\n\n            # Ensure a folder name has been set\n            if not folder_name:\n                print(\"Skipping links because no folder name is specified.\")\n                continue\n\n            # Parse the link and name\n            link, params = line.strip().split(\" \",1)\n            param_tuples = parse_params(params)\n            add_default_value(param_tuples, \"need_authentication\", \"False\")\n            # if parameter is true then add the path to authentication files\n            if eval(get_param_value(param_tuples, \"need_authentication\",\"False\")) :\n                add_default_value(param_tuples, \"cookies_path\", auth_const.COOKIES_PATH)\n                add_default_value(param_tuples, \"raw_cookies_path\", auth_const.RAW_COOKIES_PATH)\n\n           \n            if not validate_params(param_tuples,[\"file_name\",\"need_authentication\"] ,\"Skipping invalid line: {line}\"):\n                continue\n\n            params_dict = dict(param_tuples)\n            \n\n            tasks.append({\"link\": link, \n                         \"folder_name\": folder_name,\n                        \"name\": get_param_value(param_tuples, \"file_name\"),\n                        **params_dict,\n                            })\n            \n\n    return tasks\n\n\nif __name__ == \"__main__\":\n    # Kafka configuration\n    kafka_config = {\n        \"bootstrap.servers\": \"localhost:9092\",  # Replace with your Kafka server\n    }\n    kafka_topic = \"download-requests\"\n\n    # Initialize the Message Hub\n    message_hub = MessageHub(kafka_config)\n\n    # Read tasks from the links file\n    # links_file_path = \"./resources/links-tests.txt\"\n    links_file_path = config_const.LINKS_FILE_PATH\n    tasks = read_links_file(links_file_path)\n\n    # Send tasks to Kafka\n    for task in tasks:\n        message_hub.send_message(kafka_topic, key=task[\"link\"], value=task)\n"
        }
    ]
}